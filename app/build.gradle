apply plugin: 'com.android.application'

ext {
    version_sdk = [
            compileSdk: 26,
            buildTools: "26.0.1",
            minSdk    : 14,
            //targetSdk: compileSdk,
    ]
    version_sdk.targetSdk = version_sdk.compileSdk
    version_lib = [
            appcompat  : "26.0.0",
            butterknife: "8.7.0",
    ]
}

android {
    compileSdkVersion version_sdk.compileSdk
    buildToolsVersion version_sdk.buildTools

    defaultConfig {
        minSdkVersion version_sdk.minSdk
        targetSdkVersion version_sdk.targetSdk

        versionCode 11
        versionName "1.3.8"

        applicationId "de.live.gdev.cherrymusic"

        buildConfigField "boolean", "IS_TEST_BUILD", "false"
        buildConfigField "boolean", "IS_GPLAY_BUILD", "false"
        buildConfigField("String[]", "APPLICATION_LANGUAGES", '{' + getUsedAndroidLanguages().collect {"\"${it}\""}.join(",")  + '}')
    }

    sourceSets {
        main {
            manifest.srcFile '../wawl/AndroidManifest.xml'
            java.srcDirs = ['src/main/java', '../wawl/java']
            res.srcDirs = ['src/main/res', '../wawl/res']
        }
    }

    productFlavors {
        flavorDefault {
        }

        flavorGplay {
            buildConfigField "boolean", "IS_GPLAY_BUILD", "true"
        }

        flavorTest {
            applicationId "de.live.gdev.cherrymusic.test"
            versionCode = Integer.parseInt(new Date().format('yyMMdd'))
            versionName = new Date().format('yyMMdd')
            buildConfigField "boolean", "IS_TEST_BUILD", "true"
        }
   }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        warning 'InvalidPackage'
        disable 'MissingTranslation'
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/DEPENDENCIES'
    }
    sourceSets { main { java.srcDirs = ['src/main/java', '../src/wawl/java'] } }
    sourceSets { main { java.srcDirs = ['src/main/java', '../wawl/java/'] } }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'

    // Android standard libs
    compile "com.android.support:appcompat-v7:${version_lib.appcompat}"
    compile "com.android.support:design:${version_lib.appcompat}"
    compile "com.android.support:support-v4:${version_lib.appcompat}"

    // Tool libraries
    compile 'org.apache.httpcomponents:httpcore:4.4.3'
    compile "com.jakewharton:butterknife:${version_lib.butterknife}"

    annotationProcessor "com.jakewharton:butterknife-compiler:${version_lib.butterknife}"
}

String[] getUsedAndroidLanguages(){
    Set<String> langs = new HashSet<>();
    String[] resFolders = new File("app/src/main/res").list()
    for(resFolder in resFolders){
        if (resFolder.startsWith("values-")){
            String[] files = new File("app/src/main/res/"+resFolder).list();
            for (file in files){
                if (file.startsWith("strings") && file.endsWith(".xml")){
                    langs.add(resFolder.replace("values-",""))
                    break;
                }
            }
        }
    }
    return langs.toArray(new String[langs.size()])
}


final String RAW_DIR = "app/src/main/res/raw"
final String[] ROOT_TO_RAW_COPYFILES = ["README.md", "LICENSE.txt", "CHANGELOG.md", "CONTRIBUTORS.md"]

// Called before building
task copyRepoFiles(type: Copy) {

    // Copy files over to raw dir
    from rootProject.files(ROOT_TO_RAW_COPYFILES)
    into RAW_DIR.replaceFirst("app/", "")
    rename { String fileName ->
        fileName.replace(fileName, fileName.toLowerCase())
    }
}
tasks.copyRepoFiles.execute()
